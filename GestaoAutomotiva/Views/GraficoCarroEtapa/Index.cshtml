@model List<GestaoAutomotiva.Models.CarroResumoViewModel>
@using GestaoAutomotiva.Utils
@using System.Text.Json

@{
    ViewData["Title"] = "Gráfico de Etapas";
    Layout = "_Layout";
}

<div class="page-container mt-4">
    <h2 class="text-white mb-4">
        <img src="~/images/Icones/etapas.png" width="48" height="48" />  @ViewData["Title"]
    </h2>

    <!-- 🔲 Caixa branca dos filtros -->
    <div class="bg-white rounded shadow p-3 mb-4 border border-dark">
        <form method="get" class="mb-0 d-flex flex-wrap align-items-end justify-content-between gap-2">
            <div class="d-flex flex-wrap gap-2">
                <div class="d-flex flex-column" style="width: 220px;">
                    <label class="form-label text-dark mb-1" style="font-size: 13px;">Buscar por Nome</label>
                    <input type="text" name="busca" value="@Context.Request.Query["busca"]" class="form-control form-control-sm" placeholder="Cliente, Carro ou Funcionário" />
                </div>
                <div class="d-flex flex-column" style="width: 140px;">
                    <label class="form-label text-dark mb-1" style="font-size: 13px;">Data Início</label>
                    <input type="date" name="dataInicio" class="form-control form-control-sm">
                </div>
                <div class="d-flex flex-column" style="width: 140px;">
                    <label class="form-label text-dark mb-1" style="font-size: 13px;">Data Fim</label>
                    <input type="date" name="dataFim" class="form-control form-control-sm">
                </div>
                <div class="d-flex flex-column" style="width: 180px;">
                    <label class="form-label text-dark mb-1" style="font-size: 13px;">Etapa</label>
                    <select name="etapaId" class="form-select form-select-sm">
                        <option value="">Todas Etapas</option>
                        @foreach (var e in ViewBag.Etapas as List<SelectListItem>)
                        {
                            <option value="@e.Value">@e.Text</option>
                        }
                    </select>
                </div>
                <div class="d-flex flex-column" style="width: 160px;">
                    <label class="form-label text-dark mb-1" style="font-size: 13px;">Status</label>
                    <select name="status" class="form-select form-select-sm">
                        <option value="">Todos Status</option>
                        <option value="Em Andamento">Em Andamento</option>
                        <option value="Finalizado">Finalizado</option>
                        <option value="Parado">Parado</option>
                        <option value="Cancelado">Cancelado</option>
                        <option value="Reprovado">Reprovado</option>
                    </select>
                </div>

                <div class="d-flex gap-2 align-items-end ms-auto">
                    <button type="submit" class="btn btn-outline-dark">Filtrar</button>
                    <a asp-action="Index" class="btn btn-secondary">Limpar</a>
                    <button type="button" class="btn btn-outline-danger rounded px-3" onclick="exportarTodosGraficos()">
                        <i class="bi bi-file-earmark-pdf"></i> Exportar PDF
                    </button>
                </div>
            </div>

        </form>
    </div>


    <!-- Gráfico de Etapas -->
    <div class="bg-white p-4 rounded shadow mb-4">
        <p class="text-muted mb-1" style="font-size: 14px;">
            <strong>Modelo:</strong> @(string.IsNullOrEmpty(ViewBag.ModeloFiltrado) ? "Todos" : ViewBag.ModeloFiltrado) |
            <strong>Cliente:</strong> @(string.IsNullOrEmpty(ViewBag.ClienteFiltrado) ? "Todos" : ViewBag.ClienteFiltrado)
        </p>

        <h4 class="mb-3 text-dark">📅 Gráfico de Etapas</h4>

        @if (!Model.Any())
        {
            <div class="alert alert-warning">Nenhuma atividade encontrada para os filtros selecionados.</div>
        }
        else
        {
            <div id="grafico_etapas" class="rounded border p-2 mb-4" style="height:@(Model.Count * 80 + 120)px;">
                <!-- Gantt será injetado via JS -->
            </div>
        }

    </div>

    <!-- Visão Status -->
    <div id="visaoStatus" class="bg-white p-4 rounded shadow mb-4">
        <p class="text-muted mb-2" style="font-size: 14px;">
            <strong>Modelo:</strong> @(string.IsNullOrEmpty(ViewBag.ModeloFiltrado) ? "Todos" : ViewBag.ModeloFiltrado) |
            <strong>Cliente:</strong> @(string.IsNullOrEmpty(ViewBag.ClienteFiltrado) ? "Todos" : ViewBag.ClienteFiltrado)
        </p>
        <h4 class="mb-3 text-dark">📊 Visão Status</h4>

        <div class="d-flex text-white flex-wrap gap-3">
            @foreach (var item in ViewBag.ResumoPorStatus as List<GestaoAutomotiva.Models.DashboardResumoStatusViewModel>)
            {
                var statusLower = item.Status.ToLower();
                var cor = statusLower.Contains("finalizado") ? "#27ae60" :
                statusLower.Contains("andamento") ? "#2980b9" :
                statusLower.Contains("parado") ? "#f1c40f" :
                statusLower.Contains("cancelado") ? "#7f8c8d" :
                statusLower.Contains("reprovado") ? "#c0392b" :
                statusLower.Contains("parado") ? "#8e44ad" :
                statusLower.Contains("iniciado") ? "#16a085" :
                "#95a5a6";

                var detalhes = ViewBag.DetalhesPorStatus[item.Status] as List<GestaoAutomotiva.Models.AtividadeResumo>;


                <div class="rounded shadow text-white px-4 py-3" style="background-color:@cor; min-width: 220px; max-width: 300px;">
                    <h5 class="mb-1 text-center">@item.Status</h5>
                    <p class="mb-0 text-center">@item.Total</p>
                    <small class="d-block text-center">@item.Percentual.ToString("0.##")%</small>

                    @if (detalhes != null && detalhes.Any())
                    {
                        <hr class="bg-white opacity-50" />
                        <div class="text-start small">
                            @foreach (var d in detalhes.Take(3))
                            {
                                <div class="mb-2">
                                    <i class="bi bi-person"></i> <strong>@d.Funcionario</strong><br />
                                    <i class="bi bi-tools"></i> Serviço: @d.Servico<br />
                                    <i class="bi bi-diagram-3"></i> Etapa: @d.Etapa<br />
                                </div>
                            }

                            @if (detalhes.Count > 3)
                            {
                                <div class="text-center"><em>e mais...</em></div>
                            }
                        </div>
                    }
                </div>
            }
        </div>



    </div>

    <!-- Gráfico Pizza -->
    <div class="bg-white p-4 rounded shadow mb-4" style="min-height: 550px;">
        <p class="text-muted mb-1" style="font-size: 14px;">
            <strong>Modelo:</strong> @(string.IsNullOrEmpty(ViewBag.ModeloFiltrado) ? "Todos" : ViewBag.ModeloFiltrado) |
            <strong>Cliente:</strong> @(string.IsNullOrEmpty(ViewBag.ClienteFiltrado) ? "Todos" : ViewBag.ClienteFiltrado)
        </p>
        <h4 class="mb-3 text-dark">📊 Visão Consolidada</h4>
        <canvas id="pizzaStatus" style="max-height: 400px; width: 100%;"></canvas>
    </div>

    <!-- Gráfico Diário -->
    <div class="bg-white p-4 rounded shadow mt-4">
        <p class="text-muted mb-1" style="font-size: 14px;">
            <strong>Modelo:</strong> @(string.IsNullOrEmpty(ViewBag.ModeloFiltrado) ? "Todos" : ViewBag.ModeloFiltrado) |
            <strong>Cliente:</strong> @(string.IsNullOrEmpty(ViewBag.ClienteFiltrado) ? "Todos" : ViewBag.ClienteFiltrado)
        </p>
        <h4 class="mb-3 text-dark">📈 Visão Diária</h4>
        <canvas id="graficoDiario" style="width:100%; max-height: 300px;"></canvas>
    </div>
</div>

<footer style="margin-top: 100px;"></footer>

<!-- Scripts -->
<script src="https://www.gstatic.com/charts/loader.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>


<script>
    google.charts.load('current', { packages: ['gantt'] });
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
        var data = new google.visualization.DataTable();
        data.addColumn('string', 'ID');
        data.addColumn('string', 'Tarefa');
        data.addColumn('string', 'Recurso');
        data.addColumn('date', 'Início');
        data.addColumn('date', 'Término');
        data.addColumn('number', 'Duração');
        data.addColumn('number', 'Percentual');
        data.addColumn('string', 'Dependência');
        data.addColumn({ type: 'string', role: 'style' });
        data.addColumn({ type: 'string', role: 'tooltip', p: { html: true,  trigger: 'focus'} });

        data.addRows([

    @foreach (var c in Model)
    {
        var inicio = c.DataInicio;
        var fim = c.DataFim;

        var tooltip = "<div style='padding:6px 10px; font-size:13px;'>" +
                 "<strong>" + @c.Nome + "</strong><br/>" +
                 "📅 Início: " + @c.DataInicio.ToString("dd/MM/yyyy") + "<br/>" +
                 "📅 Término: " + @c.DataFim.ToString("dd/MM/yyyy") + "<br/>" +
                 "✅ Progresso: " + @c.Percentual + "%<br/>" +
                 "🛠 Etapa: " + "@c.Etapa" + "</div>";


        <text>
                [
                    "@c.Id",
                    "@c.Nome",
                    "Carro",
                    new Date(@inicio.Year, @inicio.Month - 1, @inicio.Day),
                    new Date(@fim.Year, @fim.Month - 1, @fim.Day),
                    null,
            @c.Percentual,
                    null,
                    "fill: @c.Cor",
                    "@Html.Raw(tooltip.Replace("\"", "\\\""))"
                ],
        </text>

    }


        ]);

        var options = {
            height: @Model.Count * 50 + 120,
            tooltip: { isHtml: true },
            backgroundColor: '#fff',
            gantt: {
                trackHeight: 40,
                labelStyle: { fontSize: 14, color: '#000' },
                innerGridHorizLine: { stroke: '#999', strokeWidth: 1 },
                innerGridTrack: { fill: '#f7f7f7' },
                innerGridDarkTrack: { fill: '#e0e0e0' }
            }
        };

        new google.visualization.Gantt(document.getElementById('grafico_etapas')).draw(data, options);

            // Corrigir os meses do eixo para português
    setTimeout(() => {
        const mesesEN = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        const mesesPT = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'];

        document.querySelectorAll('#grafico_etapas text').forEach(el => {
            mesesEN.forEach((mes, i) => {
                if (el.textContent.includes(mes)) {
                    el.textContent = el.textContent.replace(mes, mesesPT[i]);
                }
            });
        });
    }, 500);
    }

    function exportGantt() {
        const svg = document.querySelector('#grafico_etapas svg');
        if (!svg) {
            alert("Gráfico ainda não carregado.");
            return;
        }

        const svgData = new XMLSerializer().serializeToString(svg);
        const canvas = document.createElement("canvas");
        const blob = new Blob([svgData], { type: "image/svg+xml;charset=utf-8" });
        const url = URL.createObjectURL(blob);
        const img = new Image();

        img.onload = function () {
            canvas.width = img.width;
            canvas.height = img.height;
            const ctx = canvas.getContext("2d");
            ctx.drawImage(img, 0, 0);

            canvas.toBlob(function (blob) {
                const formData = new FormData();
                formData.append("grafico", blob, "grafico.png");

                fetch("/GraficoCarroEtapa/GerarPdf", {
                    method: "POST",
                    body: formData
                })
                .then(response => response.blob())
                .then(blob => {
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement("a");
                    a.href = url;
                    a.download = "grafico_etapas.pdf";
                    a.click();
                    URL.revokeObjectURL(url);
                });
            });
        };

        img.src = url;
    }

    // Pizza consolidada
    const pizzaCtx = document.getElementById("pizzaStatus").getContext("2d");
    const statusData = @Html.Raw(JsonSerializer.Serialize(ViewBag.ResumoPorStatus));

    // Cores padronizadas conforme os cards
    const coresStatus = statusData.map(x => {
        const status = x.Status.toLowerCase();
        if (status.includes("finalizado") && !status.includes("atraso")) return "#27ae60";     // Finalizado
        if (status.includes("finalizado") && status.includes("atraso"))  return "#e67e22";     // Finalizado com atraso
        if (status.includes("andamento"))  return "#2980b9";     // Em Andamento
        if (status.includes("parado"))     return "#f1c40f";     // Parado
        if (status.includes("cancelado"))  return "#7f8c8d";     // Cancelado
        if (status.includes("reprovado"))  return "#c0392b";     // Reprovado
        if (status.includes("iniciado"))   return "#16a085";     // Não Iniciado
        return "#95a5a6"; // Padrão
    });

    new Chart(pizzaCtx, {
        type: "doughnut",
        data: {
            labels: statusData.map(x => x.Status),
            datasets: [{
                data: statusData.map(x => x.Total),
                backgroundColor: coresStatus
            }]
        },
        options: {
            layout: { padding: 40 },
            plugins: {
                datalabels: {
                    color: "#000",
                    font: { weight: "bold", size: 13 },
                    formatter: function (value, context) {
                        const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                        const label = context.chart.data.labels[context.dataIndex];
                        const percent = ((value / total) * 100).toFixed(2);
                        return `${label} (${percent}%)\n${value}`;
                    },
                    anchor: 'end',
                    align: 'end',
                    offset: 10,
                    clamp: true,
                    clip: false
                },
                legend: { display: false },
                tooltip: { enabled: false }
            },
            responsive: true,
            maintainAspectRatio: false
        },
        plugins: [ChartDataLabels]
    });


    // Gráfico diário
    document.addEventListener("DOMContentLoaded", function () {
        const ctx = document.getElementById("graficoDiario").getContext("2d");
        const dados = @Html.Raw(JsonSerializer.Serialize(ViewBag.DadosDiarios));

        const labels = dados.map(d => new Date(d.Data).toLocaleDateString());
        const datasets = [
            { label: "Concluídas", data: dados.map(d => d.Concluidas), fill: true, borderColor: "#27ae60", backgroundColor: "rgba(39,174,96,0.2)" },
            { label: "Em Andamento", data: dados.map(d => d.Andamento), fill: true, borderColor: "#2980b9", backgroundColor: "rgba(41,128,185,0.2)" },
            { label: "Canceladas", data: dados.map(d => d.Canceladas), fill: true, borderColor: "#e67e22", backgroundColor: "rgba(230,126,34,0.2)" },
            { label: "Reprovadas", data: dados.map(d => d.Reprovadas), fill: true, borderColor: "#c0392b", backgroundColor: "rgba(192,57,43,0.2)" },
            { label: "Parados", data: dados.map(d => d.Parados), fill: true, borderColor: "#f1c40f", backgroundColor: "rgba(241,196,15,0.2)" }
        ];

        new Chart(ctx, {
            type: "line",
            data: { labels: labels, datasets: datasets },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: "bottom" },
                    tooltip: { mode: 'index', intersect: false }
                },
                scales: {
                    x: { display: true, title: { display: true, text: "Data" } },
                    y: { beginAtZero: true }
                }
            }
        });
    });

    function exportarTodosGraficos() {
           const elementos = [
        { id: "grafico_etapas", nome: "gantt.png" },
        { id: "visaoStatus", nome: "status.png" },  // ✅ novo
        { id: "pizzaStatus", nome: "pizza.png" },
        { id: "graficoDiario", nome: "linha.png" }
    ];

        const formData = new FormData();

        let parados = elementos.length;

        elementos.forEach(({ id, nome }) => {
            const el = document.getElementById(id);

            if (!el) {
                alert(`Elemento ${id} não encontrado.`);
                return;
            }

            html2canvas(el).then(canvas => {
                canvas.toBlob(blob => {
                    formData.append("imagens", blob, nome);

                    parados--;

                    if (parados === 0) {
                        fetch("/GraficoCarroEtapa/GerarPdf", {
                            method: "POST",
                            body: formData
                        })
                            .then(response => response.blob())
                            .then(blob => {
                                const url = URL.createObjectURL(blob);
                                const a = document.createElement("a");
                                a.href = url;
                                a.download = "graficos_etapas.pdf";
                                a.click();
                                URL.revokeObjectURL(url);
                            });
                    }
                });
            });
        });
    }

</script>


